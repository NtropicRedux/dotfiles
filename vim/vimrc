set nocompatible
filetype off

call plug#begin('~/.vim/plugged')

  " Common vim settings.
  Plug 'tpope/vim-sensible'

 " Git support.
  Plug 'tpope/vim-fugitive'

  " A visual Git plugin to see what has changed in each file.
  Plug 'airblade/vim-gitgutter'

  " Visual plugin to show things such as the Vim mode.
  Plug 'vim-airline/vim-airline'

  " Prettier formatter.
  Plug 'prettier/vim-prettier'

  " Colorful rainbow bracket matching.
  Plug 'luochen1990/rainbow'

  " Monokai color scheme.
  Plug 'crusoexia/vim-monokai'

  " Collection of vim color schemes.
  Plug 'rafi/awesome-vim-colorschemes'

  " A color scheme based on monokai.
  Plug 'tomasr/molokai'

  " Markdown plugin.
  Plug 'godlygeek/tabular'
  Plug 'plasticboy/vim-markdown'

  " tmux plugin.
  Plug 'tmux-plugins/vim-tmux'

  " Fuzzy file finder.
  Plug 'junegunn/fzf', { 'do': { ->fzf#install() } } 

  " Code completion.
  Plug 'ycm-core/youcompleteme'

  " File tree navigator.
  Plug 'scrooloose/nerdtree'

  " Syntax checking through external syntax checkers.
  Plug 'vim-syntastic/syntastic'

  " Mappings to delete, change and add surrounding pairs (parens,
  " quotes, etc.)
  Plug 'tpope/vim-surround'

  " Comment keybinds.
  Plug 'tpope/vim-commentary'

call plug#end()

filetype plugin indent on

" Enable syntax highlighting.
syntax on

" Set the "pyte" color scheme.
colorscheme molokai

" Turn on line numbers.
set number

" Enable intelligent indentation.
set autoindent
set smartindent

" Set backspace for certain characters.
set backspace=indent,eol,start

" Set textwidth to be 72 and visual ruler to be +1 from that.
set textwidth=72
set cc=+1

" Use spaces instead of tabs.
set tabstop=2
set shiftwidth=2
set expandtab
set smarttab
" set breakindent

" Show whitespace chars.
set list
set listchars=eol:$,tab:>-,trail:~

" Turn off automatic comment formatting.
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
" vim-markdown settings.

" Disable folding.
let g:vim_markdown_folding_disabled = 1
" Disable concealing.
let g:vim_markdown_conceal = 0
let g:tex_conceal = ""
let g:vim_markdown_math = 1
let g:vim_markdown_conceal_code_blocks = 0
" Fix indentation.
let g:vim_markdown_new_list_item_indent = 0
" Follow anchors.
let g:vim_markdown_follow_anchor = 1
" Do not automatically insert bullet points.
let g:vim_markdown_auto_insert_bullets = 0

" NERDTree settings

" Start NERDTree and leave the cursor in it.
autocmd VimEnter * NERDTree

" Start NERDTree and put the cursor back in the other window.
autocmd VimEnter * NERDTree | wincmd p

" Start NERDTree when Vim is started without file arguments.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif

" Start NERDTree.  If a file is specified, move the cursor to its
" window.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * NERDTree | if argc() > 0 || exists("s:std_in") | wincmd p | endif

" Start NERDTree, unless a file or session is specified, e.g., vim -S
" session_file.vim.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') && v:this_session == '' | NERDTree | endif

" Start NERDTree when Vim starts with a directory argument.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
  \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif

" Exit Vim if NERDTree is the only window left.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') &&
  \ b:NERDTree.isTabTree() | quit | endif

" Change the default arrows.
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

" Syntastic settings

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_enable_signs = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1

" vim-commentary settings

autocmd FileType * setlocal commentstring=#\ %s
